// Bulk Preview Dialog Component for WP-BULK1\n// Shows deterministic diff with capacity impact analysis before applying changes\n\nimport React, { useMemo } from 'react'\nimport { BulkOperationDiff, ChangeRecord } from '../types/bulk-operations'\n\ninterface BulkPreviewDialogProps {\n  diff: BulkOperationDiff\n  isOpen: boolean\n  onClose: () => void\n  onApply: () => void\n  title?: string\n}\n\nexport const BulkPreviewDialog: React.FC<BulkPreviewDialogProps> = ({\n  diff,\n  isOpen,\n  onClose,\n  onApply,\n  title = 'Bulk Operation Preview'\n}) => {\n  const { changes, summary, capacityImpact, validation } = diff\n  \n  // Group changes by type for better organization\n  const changesByType = useMemo(() => {\n    const grouped: Record<ChangeRecord['type'], ChangeRecord[]> = {\n      rename: [],\n      reassign: [],\n      modify: [],\n      add: [],\n      remove: []\n    }\n    \n    changes.forEach(change => {\n      if (grouped[change.type]) {\n        grouped[change.type].push(change)\n      }\n    })\n    \n    return grouped\n  }, [changes])\n\n  // Calculate capacity change indicators\n  const capacityChange = useMemo(() => {\n    const utilizationDelta = capacityImpact.afterCapacity.utilizationPercent - capacityImpact.beforeCapacity.utilizationPercent\n    const ratioChange = capacityImpact.afterCapacity.oversubscriptionRatio - capacityImpact.beforeCapacity.oversubscriptionRatio\n    \n    return {\n      utilizationDelta: Math.round(utilizationDelta * 10) / 10,\n      ratioChange: Math.round(ratioChange * 100) / 100,\n      isSignificant: Math.abs(utilizationDelta) > 5 || Math.abs(ratioChange) > 0.5\n    }\n  }, [capacityImpact])\n\n  if (!isOpen) return null\n\n  const renderChangeIcon = (type: ChangeRecord['type']) => {\n    const icons = {\n      rename: 'üìù',\n      reassign: 'üîÑ', \n      modify: '‚úèÔ∏è',\n      add: '‚ûï',\n      remove: '‚ùå'\n    }\n    return icons[type] || '‚Ä¢'\n  }\n\n  const renderImpactBadge = (impact: ChangeRecord['impact']) => {\n    const styles = {\n      low: { backgroundColor: '#d4edda', color: '#155724' },\n      medium: { backgroundColor: '#fff3cd', color: '#856404' },\n      high: { backgroundColor: '#f8d7da', color: '#721c24' }\n    }\n    \n    return (\n      <span \n        style={{\n          ...styles[impact],\n          padding: '2px 6px',\n          borderRadius: '3px',\n          fontSize: '11px',\n          fontWeight: 'bold',\n          textTransform: 'uppercase'\n        }}\n      >\n        {impact}\n      </span>\n    )\n  }\n\n  return (\n    <div \n      className=\"bulk-preview-overlay\"\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        zIndex: 1000,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }}\n      onClick={onClose}\n      data-testid=\"bulk-preview-overlay\"\n    >\n      <div \n        className=\"bulk-preview-dialog\"\n        style={{\n          backgroundColor: 'white',\n          borderRadius: '8px',\n          width: '90%',\n          maxWidth: '900px',\n          maxHeight: '90%',\n          overflow: 'hidden',\n          display: 'flex',\n          flexDirection: 'column'\n        }}\n        onClick={(e) => e.stopPropagation()}\n        data-testid=\"bulk-preview-dialog\"\n      >\n        {/* Header */}\n        <div \n          className=\"dialog-header\"\n          style={{\n            padding: '20px',\n            borderBottom: '1px solid #ddd',\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center'\n          }}\n        >\n          <h2 style={{ margin: 0, color: '#2c3e50' }}>\n            {title}\n          </h2>\n          <button\n            onClick={onClose}\n            style={{\n              background: 'none',\n              border: 'none',\n              fontSize: '24px',\n              cursor: 'pointer',\n              color: '#666'\n            }}\n            data-testid=\"close-preview\"\n          >\n            √ó\n          </button>\n        </div>\n\n        {/* Content */}\n        <div \n          className=\"dialog-content\"\n          style={{\n            flex: 1,\n            overflow: 'auto',\n            padding: '20px'\n          }}\n        >\n          {/* Summary Section */}\n          <div className=\"summary-section\" style={{ marginBottom: '25px' }}>\n            <h3 style={{ margin: '0 0 15px 0', color: '#2c3e50' }}>üìä Change Summary</h3>\n            <div \n              className=\"summary-grid\"\n              style={{ \n                display: 'grid', \n                gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', \n                gap: '10px' \n              }}\n            >\n              <div className=\"summary-card\" style={{ padding: '10px', backgroundColor: '#f8f9fa', borderRadius: '4px', textAlign: 'center' }}>\n                <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#007bff' }}>\n                  {summary.totalChanges}\n                </div>\n                <div style={{ fontSize: '12px', color: '#666' }}>Total Changes</div>\n              </div>\n              \n              {Object.entries(summary.byType).map(([type, count]) => count > 0 && (\n                <div key={type} className=\"summary-card\" style={{ padding: '10px', backgroundColor: '#f8f9fa', borderRadius: '4px', textAlign: 'center' }}>\n                  <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#28a745' }}>\n                    {renderChangeIcon(type as ChangeRecord['type'])} {count}\n                  </div>\n                  <div style={{ fontSize: '12px', color: '#666', textTransform: 'capitalize' }}>{type}</div>\n                </div>\n              ))}\n            </div>\n            \n            {/* Deterministic Hash */}\n            <div style={{ marginTop: '15px', padding: '8px', backgroundColor: '#e9ecef', borderRadius: '4px' }}>\n              <strong>Diff Hash:</strong> <code style={{ fontSize: '12px' }}>{diff.hash}</code>\n              <span style={{ marginLeft: '10px', fontSize: '11px', color: '#666' }}>\n                (deterministic identifier for this change set)\n              </span>\n            </div>\n          </div>\n\n          {/* Capacity Impact Section */}\n          {capacityChange.isSignificant && (\n            <div className=\"capacity-section\" style={{ marginBottom: '25px' }}>\n              <h3 style={{ margin: '0 0 15px 0', color: '#2c3e50' }}>‚ö° Capacity Impact</h3>\n              <div \n                className=\"capacity-grid\"\n                style={{ \n                  display: 'grid', \n                  gridTemplateColumns: '1fr 1fr 1fr', \n                  gap: '15px' \n                }}\n              >\n                <div className=\"capacity-before\" style={{ padding: '10px', backgroundColor: '#f8f9fa', borderRadius: '4px' }}>\n                  <h4 style={{ margin: '0 0 8px 0', fontSize: '14px', color: '#666' }}>Before</h4>\n                  <div style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                    {capacityImpact.beforeCapacity.utilizationPercent.toFixed(1)}%\n                  </div>\n                  <div style={{ fontSize: '12px', color: '#666' }}>Utilization</div>\n                  <div style={{ fontSize: '12px', color: '#666', marginTop: '5px' }}>\n                    {capacityImpact.beforeCapacity.oversubscriptionRatio.toFixed(2)}:1 ratio\n                  </div>\n                </div>\n                \n                <div className=\"capacity-change\" style={{ padding: '10px', backgroundColor: '#fff3cd', borderRadius: '4px', textAlign: 'center' }}>\n                  <div style={{ fontSize: '24px', margin: '10px 0' }}>‚Üí</div>\n                  <div style={{ fontSize: '14px', fontWeight: 'bold' }}>\n                    {capacityChange.utilizationDelta > 0 ? '+' : ''}{capacityChange.utilizationDelta}%\n                  </div>\n                  <div style={{ fontSize: '12px', color: '#856404' }}>Change</div>\n                </div>\n                \n                <div className=\"capacity-after\" style={{ padding: '10px', backgroundColor: '#f8f9fa', borderRadius: '4px' }}>\n                  <h4 style={{ margin: '0 0 8px 0', fontSize: '14px', color: '#666' }}>After</h4>\n                  <div style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                    {capacityImpact.afterCapacity.utilizationPercent.toFixed(1)}%\n                  </div>\n                  <div style={{ fontSize: '12px', color: '#666' }}>Utilization</div>\n                  <div style={{ fontSize: '12px', color: '#666', marginTop: '5px' }}>\n                    {capacityImpact.afterCapacity.oversubscriptionRatio.toFixed(2)}:1 ratio\n                  </div>\n                </div>\n              </div>\n              \n              {/* Capacity warnings/errors */}\n              {(capacityImpact.warnings.length > 0 || capacityImpact.errors.length > 0) && (\n                <div style={{ marginTop: '15px' }}>\n                  {capacityImpact.errors.map((error, index) => (\n                    <div key={index} style={{ padding: '8px', backgroundColor: '#f8d7da', color: '#721c24', borderRadius: '4px', marginBottom: '5px' }}>\n                      ‚ùå {error}\n                    </div>\n                  ))}\n                  {capacityImpact.warnings.map((warning, index) => (\n                    <div key={index} style={{ padding: '8px', backgroundColor: '#fff3cd', color: '#856404', borderRadius: '4px', marginBottom: '5px' }}>\n                      ‚ö†Ô∏è {warning}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Changes Detail Section */}\n          <div className=\"changes-section\">\n            <h3 style={{ margin: '0 0 15px 0', color: '#2c3e50' }}>üìã Detailed Changes</h3>\n            \n            {changes.length === 0 ? (\n              <div style={{ padding: '20px', textAlign: 'center', color: '#666', backgroundColor: '#f8f9fa', borderRadius: '4px' }}>\n                No changes detected\n              </div>\n            ) : (\n              <div className=\"changes-list\">\n                {Object.entries(changesByType).map(([type, typeChanges]) => \n                  typeChanges.length > 0 && (\n                    <div key={type} className=\"change-type-group\" style={{ marginBottom: '20px' }}>\n                      <h4 style={{ \n                        margin: '0 0 10px 0', \n                        fontSize: '16px', \n                        color: '#495057',\n                        textTransform: 'capitalize'\n                      }}>\n                        {renderChangeIcon(type as ChangeRecord['type'])} {type} ({typeChanges.length})\n                      </h4>\n                      \n                      {typeChanges.map((change, index) => (\n                        <div \n                          key={change.id}\n                          className=\"change-item\"\n                          style={{\n                            marginBottom: '8px',\n                            padding: '12px',\n                            border: '1px solid #dee2e6',\n                            borderRadius: '4px',\n                            backgroundColor: '#fff'\n                          }}\n                          data-testid={`change-${change.id}`}\n                        >\n                          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '8px' }}>\n                            <div style={{ flex: 1 }}>\n                              <div style={{ fontSize: '14px', fontWeight: 'bold', color: '#2c3e50' }}>\n                                {change.path}\n                              </div>\n                              <div style={{ fontSize: '12px', color: '#6c757d', marginTop: '2px' }}>\n                                {change.target} ‚Ä¢ {change.type}\n                              </div>\n                            </div>\n                            {renderImpactBadge(change.impact)}\n                          </div>\n                          \n                          {/* Before/After display */}\n                          <div className=\"before-after\" style={{ display: 'grid', gridTemplateColumns: '1fr auto 1fr', gap: '10px', alignItems: 'center' }}>\n                            <div className=\"before\" style={{ padding: '8px', backgroundColor: '#f8f9fa', borderRadius: '3px' }}>\n                              <div style={{ fontSize: '10px', color: '#6c757d', marginBottom: '2px' }}>BEFORE</div>\n                              <div style={{ fontSize: '12px', fontFamily: 'monospace', wordBreak: 'break-all' }}>\n                                {change.before !== null ? (\n                                  typeof change.before === 'object' ? JSON.stringify(change.before, null, 2) : String(change.before)\n                                ) : (\n                                  <em style={{ color: '#6c757d' }}>null</em>\n                                )}\n                              </div>\n                            </div>\n                            \n                            <div style={{ fontSize: '16px', color: '#6c757d' }}>‚Üí</div>\n                            \n                            <div className=\"after\" style={{ padding: '8px', backgroundColor: change.type === 'remove' ? '#f8d7da' : '#d4edda', borderRadius: '3px' }}>\n                              <div style={{ fontSize: '10px', color: '#6c757d', marginBottom: '2px' }}>AFTER</div>\n                              <div style={{ fontSize: '12px', fontFamily: 'monospace', wordBreak: 'break-all' }}>\n                                {change.after !== null ? (\n                                  typeof change.after === 'object' ? JSON.stringify(change.after, null, 2) : String(change.after)\n                                ) : (\n                                  <em style={{ color: '#6c757d' }}>null</em>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                          \n                          {/* Warnings/Errors for this change */}\n                          {(change.warnings?.length || change.errors?.length) && (\n                            <div style={{ marginTop: '8px' }}>\n                              {change.errors?.map((error, i) => (\n                                <div key={i} style={{ fontSize: '11px', color: '#721c24', backgroundColor: '#f8d7da', padding: '4px 6px', borderRadius: '2px', marginBottom: '2px' }}>\n                                  ‚ùå {error}\n                                </div>\n                              ))}\n                              {change.warnings?.map((warning, i) => (\n                                <div key={i} style={{ fontSize: '11px', color: '#856404', backgroundColor: '#fff3cd', padding: '4px 6px', borderRadius: '2px', marginBottom: '2px' }}>\n                                  ‚ö†Ô∏è {warning}\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  )\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Validation Section */}\n          {(!validation.isValid || validation.warnings.length > 0 || validation.guards.length > 0) && (\n            <div className=\"validation-section\" style={{ marginTop: '25px' }}>\n              <h3 style={{ margin: '0 0 15px 0', color: '#2c3e50' }}>üõ°Ô∏è Validation Results</h3>\n              \n              {validation.errors.map((error, index) => (\n                <div key={index} style={{ padding: '10px', backgroundColor: '#f8d7da', color: '#721c24', borderRadius: '4px', marginBottom: '8px' }}>\n                  ‚ùå <strong>Error:</strong> {error}\n                </div>\n              ))}\n              \n              {validation.warnings.map((warning, index) => (\n                <div key={index} style={{ padding: '10px', backgroundColor: '#fff3cd', color: '#856404', borderRadius: '4px', marginBottom: '8px' }}>\n                  ‚ö†Ô∏è <strong>Warning:</strong> {warning}\n                </div>\n              ))}\n              \n              {validation.guards.map((guard, index) => (\n                <div key={index} style={{ padding: '10px', backgroundColor: '#f8d7da', color: '#721c24', borderRadius: '4px', marginBottom: '8px' }}>\n                  üö´ <strong>Constraint Violation:</strong> {guard.message}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Footer with Actions */}\n        <div \n          className=\"dialog-footer\"\n          style={{\n            padding: '20px',\n            borderTop: '1px solid #ddd',\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center'\n          }}\n        >\n          <div className=\"validation-status\">\n            {validation.isValid ? (\n              <span style={{ color: '#28a745', fontWeight: 'bold' }}>\n                ‚úÖ Validation Passed\n              </span>\n            ) : (\n              <span style={{ color: '#dc3545', fontWeight: 'bold' }}>\n                ‚ùå Validation Failed\n              </span>\n            )}\n          </div>\n          \n          <div className=\"action-buttons\" style={{ display: 'flex', gap: '10px' }}>\n            <button\n              onClick={onClose}\n              style={{\n                padding: '10px 20px',\n                backgroundColor: '#6c757d',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              }}\n              data-testid=\"cancel-bulk-operation\"\n            >\n              Cancel\n            </button>\n            \n            <button\n              onClick={onApply}\n              disabled={!validation.isValid}\n              style={{\n                padding: '10px 20px',\n                backgroundColor: validation.isValid ? '#28a745' : '#6c757d',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: validation.isValid ? 'pointer' : 'not-allowed'\n              }}\n              data-testid=\"apply-bulk-operation\"\n            >\n              Apply Changes ({summary.totalChanges})\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default BulkPreviewDialog