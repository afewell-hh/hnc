/**
 * ProvChip - Provenance tracking chip component
 * Shows field origins with visual indicators and tooltip details
 */

import React from 'react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { 
  User, 
  Bot, 
  Download, 
  Edit, 
  RotateCcw,
  Clock,
  MessageSquare
} from 'lucide-react';
import type { ProvenanceInfo } from '@/.upstream/fabric/ui/src/types/fabric';
import { cn, formatDateTime } from '@/lib/utils';

interface ProvChipProps {
  provenance: ProvenanceInfo;
  onEdit?: () => void;
  onReset?: () => void;
  size?: 'sm' | 'md' | 'lg';
  variant?: 'chip' | 'inline' | 'detailed';
  showActions?: boolean;
  className?: string;
}

const PROVENANCE_CONFIG = {
  user: {
    icon: User,
    label: 'User Modified',
    color: 'bg-blue-100 text-blue-800 border-blue-300',
    description: 'Manually configured by user'
  },
  auto: {
    icon: Bot,
    label: 'Auto Generated',
    color: 'bg-green-100 text-green-800 border-green-300',
    description: 'Automatically generated by system'
  },
  import: {
    icon: Download,
    label: 'Imported',
    color: 'bg-purple-100 text-purple-800 border-purple-300',
    description: 'Imported from external source'
  }
} as const;

export function ProvChip({
  provenance,
  onEdit,
  onReset,
  size = 'sm',
  variant = 'chip',
  showActions = false,
  className
}: ProvChipProps) {
  const config = PROVENANCE_CONFIG[provenance.source];
  const Icon = config.icon;

  const formatTimestamp = (timestamp?: string) => {
    if (!timestamp) return 'Unknown time';
    return formatDateTime(new Date(timestamp));
  };

  const renderChipContent = () => {
    switch (size) {
      case 'lg':
        return (
          <div className="flex items-center gap-2">
            <Icon className="h-4 w-4" />
            <span className="text-sm font-medium">{config.label}</span>
            <Clock className="h-3 w-3" />
            <span className="text-xs">{formatTimestamp(provenance.timestamp)}</span>
          </div>
        );
      case 'md':
        return (
          <div className="flex items-center gap-1">
            <Icon className="h-3 w-3" />
            <span className="text-xs">{config.label}</span>
          </div>
        );
      default:
        return <Icon className="h-3 w-3" />;
    }
  };

  const renderTooltipContent = () => (
    <div className="space-y-2">
      <div className="flex items-center gap-2">
        <Icon className="h-4 w-4" />
        <span className="font-medium">{config.label}</span>
      </div>
      <p className="text-sm text-muted-foreground">{config.description}</p>
      
      <div className="space-y-1 text-xs">
        <div className="flex items-center gap-1">
          <Clock className="h-3 w-3" />
          <span>{formatTimestamp(provenance.timestamp)}</span>
        </div>
        {provenance.comment && (
          <div className="flex items-start gap-1">
            <MessageSquare className="h-3 w-3 mt-0.5" />
            <span className="break-words">{provenance.comment}</span>
          </div>
        )}
      </div>

      {showActions && (onEdit || onReset) && (
        <div className="flex gap-1 pt-2 border-t">
          {onEdit && (
            <Button
              variant="ghost"
              size="sm"
              onClick={onEdit}
              className="h-6 px-2 text-xs"
            >
              <Edit className="h-3 w-3 mr-1" />
              Edit
            </Button>
          )}
          {onReset && provenance.source === 'user' && (
            <Button
              variant="ghost"
              size="sm"
              onClick={onReset}
              className="h-6 px-2 text-xs"
            >
              <RotateCcw className="h-3 w-3 mr-1" />
              Reset
            </Button>
          )}
        </div>
      )}
    </div>
  );

  if (variant === 'inline') {
    return (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <span className={cn(
              'inline-flex items-center gap-1 text-xs text-muted-foreground',
              className
            )}>
              <Icon className="h-3 w-3" />
              {size !== 'sm' && config.label}
            </span>
          </TooltipTrigger>
          <TooltipContent side="top" className="max-w-xs">
            {renderTooltipContent()}
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    );
  }

  if (variant === 'detailed') {
    return (
      <div className={cn('p-3 rounded-md border', config.color, className)}>
        <div className="flex items-start justify-between">
          <div className="flex items-center gap-2">
            <Icon className="h-4 w-4" />
            <div>
              <p className="text-sm font-medium">{config.label}</p>
              <p className="text-xs opacity-75">{config.description}</p>
            </div>
          </div>
          {showActions && (onEdit || onReset) && (
            <div className="flex gap-1">
              {onEdit && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onEdit}
                  className="h-6 px-2"
                >
                  <Edit className="h-3 w-3" />
                </Button>
              )}
              {onReset && provenance.source === 'user' && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onReset}
                  className="h-6 px-2"
                >
                  <RotateCcw className="h-3 w-3" />
                </Button>
              )}
            </div>
          )}
        </div>
        
        <div className="mt-2 text-xs opacity-75">
          <div className="flex items-center gap-1">
            <Clock className="h-3 w-3" />
            <span>{formatTimestamp(provenance.timestamp)}</span>
          </div>
          {provenance.comment && (
            <div className="flex items-start gap-1 mt-1">
              <MessageSquare className="h-3 w-3 mt-0.5" />
              <span>{provenance.comment}</span>
            </div>
          )}
        </div>
      </div>
    );
  }

  // Default chip variant
  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Badge 
            variant="outline" 
            className={cn(
              'transition-colors',
              config.color,
              size === 'sm' && 'h-5 px-1',
              size === 'md' && 'h-6 px-2',
              size === 'lg' && 'h-7 px-3',
              className
            )}
          >
            {renderChipContent()}
          </Badge>
        </TooltipTrigger>
        <TooltipContent side="top" className="max-w-xs">
          {renderTooltipContent()}
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
}

export default ProvChip;