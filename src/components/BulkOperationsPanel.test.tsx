// Unit Tests for BulkOperationsPanel Component - WP-BULK1\n// Tests pattern-based renaming UI and class reassignment functionality\n\nimport React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { describe, it, expect, vi, beforeEach } from 'vitest'\nimport { BulkOperationsPanel } from './BulkOperationsPanel'\nimport { FabricSpec } from '../app.types'\nimport { COMMON_PATTERNS } from '../types/bulk-operations'\n\n// Mock utilities to avoid actual computation during tests\nvi.mock('../utils/bulk-operations', () => ({\n  applyRenamingPattern: vi.fn((value: string, pattern: any) => {\n    if (pattern.type === 'regex' && pattern.pattern === '^server-(.+)$') {\n      return value.replace(/^server-(.+)$/, 'srv-$1')\n    }\n    return value\n  }),\n  generateBulkOperationDiff: vi.fn(() => ({\n    operationId: 'test-op',\n    timestamp: new Date(),\n    changes: [\n      {\n        id: 'test-change',\n        type: 'rename',\n        target: 'class',\n        path: 'leafClasses.class-1.name',\n        before: 'Original Name',\n        after: 'New Name',\n        impact: 'medium'\n      }\n    ],\n    summary: {\n      totalChanges: 1,\n      byType: { rename: 1, reassign: 0, modify: 0, add: 0, remove: 0 },\n      byTarget: { class: 1, profile: 0, device: 0, property: 0 },\n      byImpact: { low: 0, medium: 1, high: 0 }\n    },\n    capacityImpact: {\n      beforeCapacity: {\n        totalEndpoints: 100,\n        totalCapacity: 200,\n        utilizationPercent: 50,\n        byClass: {},\n        oversubscriptionRatio: 0.5\n      },\n      afterCapacity: {\n        totalEndpoints: 100,\n        totalCapacity: 200,\n        utilizationPercent: 50,\n        byClass: {},\n        oversubscriptionRatio: 0.5\n      },\n      changedClasses: ['class-1'],\n      warnings: [],\n      errors: []\n    },\n    validation: {\n      isValid: true,\n      errors: [],\n      warnings: [],\n      guards: []\n    },\n    hash: 'test-hash-1234'\n  })),\n  createBulkOperationValidator: vi.fn(() => ({\n    validatePattern: vi.fn(() => ({ isValid: true, errors: [] })),\n    validateReassignment: vi.fn(() => ({ isValid: true, errors: [] })),\n    validateCapacityImpact: vi.fn(() => ({ isValid: true, errors: [], warnings: [] })),\n    validateNamingConflicts: vi.fn(() => ({ hasConflicts: false, conflicts: [] }))\n  }))\n}))\n\n// Mock BulkPreviewDialog\nvi.mock('./BulkPreviewDialog', () => ({\n  BulkPreviewDialog: ({ isOpen, onClose, onApply, diff }: any) => {\n    if (!isOpen) return null\n    return (\n      <div data-testid=\"bulk-preview-dialog\">\n        <button onClick={onClose} data-testid=\"close-preview\">Close</button>\n        <button onClick={onApply} data-testid=\"apply-changes\">Apply</button>\n        <div data-testid=\"changes-count\">{diff.summary.totalChanges}</div>\n      </div>\n    )\n  }\n}))\n\nconst createMockFabricSpec = (): FabricSpec => ({\n  name: 'test-fabric',\n  spineModelId: 'DS3000',\n  leafModelId: 'DS2000',\n  leafClasses: [\n    {\n      id: 'class-1',\n      name: 'Standard Compute',\n      role: 'standard',\n      uplinksPerLeaf: 4,\n      count: 2,\n      endpointProfiles: [\n        {\n          name: 'server-profile-a',\n          portsPerEndpoint: 2,\n          type: 'server',\n          count: 20\n        }\n      ]\n    },\n    {\n      id: 'class-2',\n      name: 'High Density',\n      role: 'standard',\n      uplinksPerLeaf: 6,\n      count: 1,\n      endpointProfiles: [\n        {\n          name: 'dense-server-c',\n          portsPerEndpoint: 4,\n          type: 'server',\n          count: 10\n        }\n      ]\n    }\n  ]\n})\n\ndescribe('BulkOperationsPanel', () => {\n  let mockOnApplyChanges: ReturnType<typeof vi.fn>\n  let mockFabricSpec: FabricSpec\n  \n  beforeEach(() => {\n    mockOnApplyChanges = vi.fn()\n    mockFabricSpec = createMockFabricSpec()\n  })\n\n  const renderComponent = (props = {}) => {\n    return render(\n      <BulkOperationsPanel\n        fabricSpec={mockFabricSpec}\n        onApplyChanges={mockOnApplyChanges}\n        disabled={false}\n        {...props}\n      />\n    )\n  }\n\n  describe('Basic Rendering', () => {\n    it('should render with default props', () => {\n      renderComponent()\n      \n      expect(screen.getByTestId('bulk-operations-panel')).toBeInTheDocument()\n      expect(screen.getByText('🔧 Bulk Operations')).toBeInTheDocument()\n      expect(screen.getByText(/Apply pattern-based changes/)).toBeInTheDocument()\n    })\n\n    it('should show tab navigation', () => {\n      renderComponent()\n      \n      expect(screen.getByTestId('rename-tab')).toBeInTheDocument()\n      expect(screen.getByTestId('reassign-tab')).toBeInTheDocument()\n      expect(screen.getByText('📝 Pattern Rename')).toBeInTheDocument()\n      expect(screen.getByText('🔄 Class Reassign')).toBeInTheDocument()\n    })\n\n    it('should default to rename tab', () => {\n      renderComponent()\n      \n      expect(screen.getByTestId('rename-tab-content')).toBeInTheDocument()\n      expect(screen.queryByTestId('reassign-tab-content')).not.toBeInTheDocument()\n    })\n  })\n\n  describe('Pattern Rename Tab', () => {\n    it('should show common patterns by default', () => {\n      renderComponent()\n      \n      expect(screen.getByTestId('use-common-patterns')).toBeChecked()\n      \n      COMMON_PATTERNS.forEach(pattern => {\n        expect(screen.getByTestId(`pattern-${pattern.id}`)).toBeInTheDocument()\n      })\n    })\n\n    it('should allow selecting common patterns', () => {\n      renderComponent()\n      \n      const serverPattern = screen.getByTestId('pattern-server-to-srv')\n      fireEvent.click(serverPattern)\n      \n      // Check if pattern is visually selected (border style changes)\n      expect(serverPattern).toHaveStyle('border: 2px solid #007bff')\n    })\n\n    it('should switch to custom pattern mode', () => {\n      renderComponent()\n      \n      const customPatternRadio = screen.getByTestId('use-custom-pattern')\n      fireEvent.click(customPatternRadio)\n      \n      expect(customPatternRadio).toBeChecked()\n      expect(screen.getByTestId('custom-pattern-type')).toBeInTheDocument()\n      expect(screen.getByTestId('custom-pattern-target')).toBeInTheDocument()\n    })\n\n    it('should validate custom pattern inputs', () => {\n      renderComponent()\n      \n      fireEvent.click(screen.getByTestId('use-custom-pattern'))\n      \n      const patternInput = screen.getByTestId('custom-pattern-input')\n      const replacementInput = screen.getByTestId('custom-replacement-input')\n      \n      fireEvent.change(patternInput, { target: { value: '^server-(.+)$' } })\n      fireEvent.change(replacementInput, { target: { value: 'srv-$1' } })\n      \n      expect(patternInput).toHaveValue('^server-(.+)$')\n      expect(replacementInput).toHaveValue('srv-$1')\n      \n      // Preview should show example transformation\n      expect(screen.getByText(/\"example-name\"/)).toBeInTheDocument()\n    })\n\n    it('should show pattern type options', () => {\n      renderComponent()\n      \n      fireEvent.click(screen.getByTestId('use-custom-pattern'))\n      \n      const typeSelect = screen.getByTestId('custom-pattern-type')\n      expect(typeSelect).toBeInTheDocument()\n      \n      // Check all pattern type options\n      expect(screen.getByText('Regex')).toBeInTheDocument()\n      expect(screen.getByText('Template')).toBeInTheDocument()\n      expect(screen.getByText('Prefix')).toBeInTheDocument()\n      expect(screen.getByText('Suffix')).toBeInTheDocument()\n    })\n\n    it('should show target options', () => {\n      renderComponent()\n      \n      fireEvent.click(screen.getByTestId('use-custom-pattern'))\n      \n      const targetSelect = screen.getByTestId('custom-pattern-target')\n      expect(targetSelect).toBeInTheDocument()\n      \n      // Check all target options\n      expect(screen.getByText('Device Names')).toBeInTheDocument()\n      expect(screen.getByText('Class Names')).toBeInTheDocument()\n      expect(screen.getByText('Profile Names')).toBeInTheDocument()\n    })\n  })\n\n  describe('Class Reassignment Tab', () => {\n    it('should switch to reassign tab', () => {\n      renderComponent()\n      \n      fireEvent.click(screen.getByTestId('reassign-tab'))\n      \n      expect(screen.getByTestId('reassign-tab-content')).toBeInTheDocument()\n      expect(screen.queryByTestId('rename-tab-content')).not.toBeInTheDocument()\n    })\n\n    it('should show empty state initially', () => {\n      renderComponent()\n      \n      fireEvent.click(screen.getByTestId('reassign-tab'))\n      \n      expect(screen.getByText(/No reassignments configured/)).toBeInTheDocument()\n      expect(screen.getByTestId('add-reassignment')).toBeInTheDocument()\n    })\n\n    it('should allow adding reassignments', () => {\n      renderComponent()\n      \n      fireEvent.click(screen.getByTestId('reassign-tab'))\n      fireEvent.click(screen.getByTestId('add-reassignment'))\n      \n      expect(screen.getByTestId('reassignment-0')).toBeInTheDocument()\n      expect(screen.getByTestId('source-class-0')).toBeInTheDocument()\n      expect(screen.getByTestId('target-class-0')).toBeInTheDocument()\n    })\n\n    it('should populate class options in selects', () => {\n      renderComponent()\n      \n      fireEvent.click(screen.getByTestId('reassign-tab'))\n      fireEvent.click(screen.getByTestId('add-reassignment'))\n      \n      const sourceSelect = screen.getByTestId('source-class-0')\n      \n      // Check that fabric classes are available as options\n      expect(screen.getByText('Standard Compute (class-1)')).toBeInTheDocument()\n      expect(screen.getByText('High Density (class-2)')).toBeInTheDocument()\n    })\n\n    it('should allow removing reassignments', () => {\n      renderComponent()\n      \n      fireEvent.click(screen.getByTestId('reassign-tab'))\n      fireEvent.click(screen.getByTestId('add-reassignment'))\n      \n      expect(screen.getByTestId('reassignment-0')).toBeInTheDocument()\n      \n      fireEvent.click(screen.getByTestId('remove-reassignment-0'))\n      \n      expect(screen.queryByTestId('reassignment-0')).not.toBeInTheDocument()\n    })\n\n    it('should disable add button when fewer than 2 classes', () => {\n      const singleClassSpec = {\n        ...mockFabricSpec,\n        leafClasses: [mockFabricSpec.leafClasses![0]]\n      }\n      \n      renderComponent({ fabricSpec: singleClassSpec })\n      \n      fireEvent.click(screen.getByTestId('reassign-tab'))\n      \n      expect(screen.getByTestId('add-reassignment')).toBeDisabled()\n    })\n  })\n\n  describe('Preview and Apply Operations', () => {\n    it('should enable preview button when pattern is selected', () => {\n      renderComponent()\n      \n      // Initially disabled\n      expect(screen.getByTestId('preview-changes-button')).toBeDisabled()\n      \n      // Select a pattern\n      fireEvent.click(screen.getByTestId('pattern-server-to-srv'))\n      \n      // Should be enabled now\n      expect(screen.getByTestId('preview-changes-button')).toBeEnabled()\n    })\n\n    it('should enable preview button when custom pattern is complete', () => {\n      renderComponent()\n      \n      fireEvent.click(screen.getByTestId('use-custom-pattern'))\n      \n      // Initially disabled\n      expect(screen.getByTestId('preview-changes-button')).toBeDisabled()\n      \n      // Fill in custom pattern\n      fireEvent.change(screen.getByTestId('custom-pattern-input'), {\n        target: { value: '^test-(.+)$' }\n      })\n      fireEvent.change(screen.getByTestId('custom-replacement-input'), {\n        target: { value: 'new-$1' }\n      })\n      \n      // Should be enabled now\n      expect(screen.getByTestId('preview-changes-button')).toBeEnabled()\n    })\n\n    it('should enable preview button when reassignments are added', () => {\n      renderComponent()\n      \n      fireEvent.click(screen.getByTestId('reassign-tab'))\n      \n      // Initially disabled\n      expect(screen.getByTestId('preview-changes-button')).toBeDisabled()\n      \n      // Add reassignment\n      fireEvent.click(screen.getByTestId('add-reassignment'))\n      \n      // Should be enabled now\n      expect(screen.getByTestId('preview-changes-button')).toBeEnabled()\n    })\n\n    it('should show loading state during preview generation', async () => {\n      renderComponent()\n      \n      fireEvent.click(screen.getByTestId('pattern-server-to-srv'))\n      fireEvent.click(screen.getByTestId('preview-changes-button'))\n      \n      // Should show loading state briefly\n      expect(screen.getByText('Generating Preview...')).toBeInTheDocument()\n      \n      // Wait for preview to load\n      await waitFor(() => {\n        expect(screen.getByTestId('bulk-preview-dialog')).toBeInTheDocument()\n      })\n    })\n\n    it('should open preview dialog after generation', async () => {\n      renderComponent()\n      \n      fireEvent.click(screen.getByTestId('pattern-server-to-srv'))\n      fireEvent.click(screen.getByTestId('preview-changes-button'))\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('bulk-preview-dialog')).toBeInTheDocument()\n        expect(screen.getByTestId('changes-count')).toHaveTextContent('1')\n      })\n    })\n\n    it('should apply changes and close dialog when confirmed', async () => {\n      renderComponent()\n      \n      fireEvent.click(screen.getByTestId('pattern-server-to-srv'))\n      fireEvent.click(screen.getByTestId('preview-changes-button'))\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('bulk-preview-dialog')).toBeInTheDocument()\n      })\n      \n      fireEvent.click(screen.getByTestId('apply-changes'))\n      \n      expect(mockOnApplyChanges).toHaveBeenCalled()\n      expect(screen.queryByTestId('bulk-preview-dialog')).not.toBeInTheDocument()\n    })\n\n    it('should close dialog without applying when cancelled', async () => {\n      renderComponent()\n      \n      fireEvent.click(screen.getByTestId('pattern-server-to-srv'))\n      fireEvent.click(screen.getByTestId('preview-changes-button'))\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('bulk-preview-dialog')).toBeInTheDocument()\n      })\n      \n      fireEvent.click(screen.getByTestId('close-preview'))\n      \n      expect(mockOnApplyChanges).not.toHaveBeenCalled()\n      expect(screen.queryByTestId('bulk-preview-dialog')).not.toBeInTheDocument()\n    })\n\n    it('should reset state when reset button is clicked', () => {\n      renderComponent()\n      \n      // Select a pattern\n      fireEvent.click(screen.getByTestId('pattern-server-to-srv'))\n      \n      // Click reset\n      fireEvent.click(screen.getByTestId('reset-bulk-operations'))\n      \n      // Should return to initial state\n      expect(screen.getByTestId('use-common-patterns')).toBeChecked()\n      expect(screen.getByTestId('preview-changes-button')).toBeDisabled()\n    })\n  })\n\n  describe('Disabled State', () => {\n    it('should disable all controls when disabled prop is true', () => {\n      renderComponent({ disabled: true })\n      \n      expect(screen.getByTestId('preview-changes-button')).toBeDisabled()\n      expect(screen.getByTestId('reset-bulk-operations')).toBeDisabled()\n      \n      // Try to interact with patterns - should not work\n      const pattern = screen.getByTestId('pattern-server-to-srv')\n      fireEvent.click(pattern)\n      \n      // Preview should still be disabled\n      expect(screen.getByTestId('preview-changes-button')).toBeDisabled()\n    })\n\n    it('should show disabled styles when disabled', () => {\n      renderComponent({ disabled: true })\n      \n      const previewButton = screen.getByTestId('preview-changes-button')\n      expect(previewButton).toHaveStyle('cursor: not-allowed')\n      \n      const resetButton = screen.getByTestId('reset-bulk-operations')\n      expect(resetButton).toHaveStyle('cursor: not-allowed')\n    })\n  })\n\n  describe('Accessibility', () => {\n    it('should have proper ARIA labels', () => {\n      renderComponent()\n      \n      const panel = screen.getByTestId('bulk-operations-panel')\n      expect(panel).toBeInTheDocument()\n      \n      // Check that buttons have appropriate labels\n      const previewButton = screen.getByTestId('preview-changes-button')\n      const resetButton = screen.getByTestId('reset-bulk-operations')\n      \n      expect(previewButton).toBeInTheDocument()\n      expect(resetButton).toBeInTheDocument()\n    })\n\n    it('should support keyboard navigation', () => {\n      renderComponent()\n      \n      const renameTab = screen.getByTestId('rename-tab')\n      const reassignTab = screen.getByTestId('reassign-tab')\n      \n      // Tabs should be focusable\n      renameTab.focus()\n      expect(renameTab).toHaveFocus()\n      \n      reassignTab.focus()\n      expect(reassignTab).toHaveFocus()\n    })\n  })\n})"