// Generated TypeScript types from upstream CRDs
// DO NOT EDIT - Generated by tools/upstream-extract.mjs
// Generated at: 2025-09-01T00:16:39.746Z

export interface K8sMetadata {
  name?: string;
  namespace?: string;
  labels?: Record<string, string>;
  annotations?: Record<string, string>;
}

export interface K8sResource {
  apiVersion: string;
  kind: string;
  metadata: K8sMetadata;
}

export interface ExternalAttachment extends K8sResource {
  spec: {
    /** Connection is the name of the Connection object this attachment belongs to (essentially the name of the switch/port) */
    connection?: string;
    /** External is the name of the External object this attachment belongs to */
    external?: string;
    /** Neighbor is the BGP neighbor configuration for the external attachment */
    neighbor?: Record<string, any>;
    /** Switch is the switch port configuration for the external attachment */
    switch?: Record<string, any>;
  };
  status?: {
  };
}

export interface ExternalPeering extends K8sResource {
  spec: {
    /** Permit defines the peering policy - which VPC and External to peer with and which subnets/prefixes to permit */
    permit?: Record<string, any>;
  };
  status?: {
  };
}

export interface External extends K8sResource {
  spec: {
    /** InboundCommunity is the inbound community to filter routes from the external system (e.g. 65102:5000) */
    inboundCommunity?: string;
    /** IPv4Namespace is the name of the IPv4Namespace this External belongs to */
    ipv4Namespace?: string;
    /** OutboundCommunity is theoutbound community that all outbound routes will be stamped with (e.g. 50000:50001) */
    outboundCommunity?: string;
  };
  status?: {
  };
}

export interface VPCAttachment extends K8sResource {
  spec: {
    /** Connection is the name of the connection to attach to the VPC */
    connection?: string;
    /** NativeVLAN is the flag to indicate if the native VLAN should be used for attaching the VPC subnet */
    nativeVLAN?: boolean;
    /** Subnet is the full name of the VPC subnet to attach to, such as "vpc-1/default" */
    subnet?: string;
  };
  status?: {
  };
}

export interface VPCPeering extends K8sResource {
  spec: {
    /** Permit defines a list of the peering policies - which VPC subnets will have access to the peer VPC subnets. */
    permit?: Record<string, any>[];
    remote?: string;
  };
  status?: {
  };
}

export interface VPC extends K8sResource {
  spec: {
    /** DefaultIsolated sets default behavior for isolated mode for the subnets (disabled by default) */
    defaultIsolated?: boolean;
    /** DefaultRestricted sets default behavior for restricted mode for the subnets (disabled by default) */
    defaultRestricted?: boolean;
    /** IPv4Namespace is the name of the IPv4Namespace this VPC belongs to (if not specified, "default" is used) */
    ipv4Namespace?: string;
    /** Mode is the VPC mode that defines how the VPCs are configured on the switches */
    mode?: string;
    /** Permit defines a list of the access policies between the subnets within the VPC - each policy is a list of subnets that have access to each other.
It's applied on top of the subnet isolation flag and if subnet isn't isolated it's not required to have it in a permit list while if vpc is marked
as isolated it's required to have it in a permit list to have access to other subnets. */
    permit?: string[][];
    /** StaticRoutes is the list of additional static routes for the VPC */
    staticRoutes?: Record<string, any>[];
    /** Subnets is the list of VPC subnets to configure */
    subnets?: Record<string, any>;
    /** VLANNamespace is the name of the VLANNamespace this VPC belongs to (if not specified, "default" is used) */
    vlanNamespace?: string;
  };
  status?: {
  };
}

export interface Connection extends K8sResource {
  spec: {
    /** Bundled defines the bundled connection (port channel, single server to a single switch with multiple links) */
    bundled?: Record<string, any>;
    /** ESLAG defines the ESLAG connection (port channel, single server to 2-4 switches with multiple links) */
    eslag?: Record<string, any>;
    /** External defines the external connection (single switch to a single external device with a single link) */
    external?: Record<string, any>;
    /** Fabric defines the fabric connection (single spine to a single leaf with at least one link) */
    fabric?: Record<string, any>;
    /** Gateway defines the gateway connection (single spine to a single gateway with at least one link) */
    gateway?: Record<string, any>;
    /** MCLAG defines the MCLAG connection (port channel, single server to pair of switches with multiple links) */
    mclag?: Record<string, any>;
    /** MCLAGDomain defines the MCLAG domain connection which makes two switches into a single logical switch for server multi-homing */
    mclagDomain?: Record<string, any>;
    /** Mesh defines the mesh connection (direct leaf to leaf connection with at least one link) */
    mesh?: Record<string, any>;
    /** StaticExternal defines the static external connection (single switch to a single external device with a single link) */
    staticExternal?: Record<string, any>;
    /** Unbundled defines the unbundled connection (no port channel, single server to a single switch with a single link) */
    unbundled?: Record<string, any>;
    /** VPCLoopback defines the VPC loopback connection (multiple port pairs on a single switch) for automated workaround */
    vpcLoopback?: Record<string, any>;
  };
  status?: {
  };
}

export interface ServerProfile extends K8sResource {
  spec: {
    nics?: Record<string, any>[];
  };
  status?: {
  };
}

export interface Server extends K8sResource {
  spec: {
    /** Description is a description of the server */
    description?: string;
    /** Profile is the profile of the server, name of the ServerProfile object to be used for this server, currently not used by the Fabric */
    profile?: string;
  };
  status?: {
  };
}

export interface Switch extends K8sResource {
  spec: {
    /** ASN is the ASN of the switch */
    asn?: number;
    /** Boot is the boot/provisioning information of the switch */
    boot?: Record<string, any>;
    /** Description is a description of the switch */
    description?: string;
    /** ECMP is the ECMP configuration for the switch */
    ecmp?: Record<string, any>;
    /** EnableAllPorts is a flag to enable all ports on the switch regardless of them being used or not */
    enableAllPorts?: boolean;
    /** Groups is a list of switch groups the switch belongs to */
    groups?: string[];
    /** IP is the IP of the switch that could be used to access it from other switches and control nodes in the Fabric */
    ip?: string;
    /** PortAutoNegs is a map of port auto negotiation, key is the port name, value is true or false */
    portAutoNegs?: Record<string, any>;
    /** PortBreakouts is a map of port breakouts, key is the port name, value is the breakout configuration, such as "1/55: 4x25G" */
    portBreakouts?: Record<string, any>;
    /** PortGroupSpeeds is a map of port group speeds, key is the port group name, value is the speed, such as '"2": 10G' */
    portGroupSpeeds?: Record<string, any>;
    /** PortSpeeds is a map of port speeds, key is the port name, value is the speed */
    portSpeeds?: Record<string, any>;
    /** Profile is the profile of the switch, name of the SwitchProfile object to be used for this switch, currently not used by the Fabric */
    profile?: string;
    /** ProtocolIP is used as BGP Router ID for switch configuration */
    protocolIP?: string;
    /** Redundancy is the switch redundancy configuration including name of the redundancy group switch belongs to and its type, used both for MCLAG and ESLAG connections */
    redundancy?: Record<string, any>;
    /** RoCE is a flag to enable RoCEv2 support on the switch which includes lossless queues and QoS configuration */
    roce?: boolean;
    /** Role is the role of the switch, could be spine, server-leaf or border-leaf or mixed-leaf */
    role: string;
    /** VLANNamespaces is a list of VLAN namespaces the switch is part of, their VLAN ranges could not overlap */
    vlanNamespaces?: string[];
    /** VTEPIP is the VTEP IP of the switch */
    vtepIP?: string;
  };
  status?: {
  };
}

export interface SwitchProfile extends K8sResource {
  spec: {
    /** Config defines the switch-specific configuration options */
    config?: Record<string, any>;
    /** DisplayName defines the human-readable name of the switch */
    displayName?: string;
    /** Features defines the features supported by the switch */
    features?: Record<string, any>;
    /** NOSType defines the NOS type to be used for the switch */
    nosType?: string;
    /** Notes is a free-form field for any additional information about the switch */
    notes?: string;
    /** OtherNames defines alternative names for the switch */
    otherNames?: string[];
    /** Platform is what expected to be request by ONIE and displayed in the NOS */
    platform?: string;
    /** PortGroups defines the switch port group configuration */
    portGroups?: Record<string, any>;
    /** PortProfiles defines the switch port profile configuration */
    portProfiles?: Record<string, any>;
    /** Ports defines the switch port configuration */
    ports?: Record<string, any>;
    /** SwitchSilicon defines the switch silicon name */
    switchSilicon?: string;
  };
  status?: {
  };
}

